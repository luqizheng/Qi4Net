<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qi</name>
    </assembly>
    <members>
        <member name="T:Qi.VoidFunc`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t1"></param>
        </member>
        <member name="T:Qi.VoidFunc">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.VoidFunc`2">
            <summary>
            
            </summary>
            <typeparam name="TT1"></typeparam>
            <typeparam name="TT2"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
        </member>
        <member name="T:Qi.VoidFunc`3">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
        </member>
        <member name="T:Qi.VoidFunc`4">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <param name="t4"></param>
        </member>
        <member name="T:Qi.DataTables.DataTable`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Qi.DataTables.IDataTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.DataTables.IDataTable.GetRows">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.IDataTable.SetData(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.IDataTable.GetSummaries(System.String)">
            <summary>
            
            </summary>
            <param name="calculatorName"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.DataTables.IDataTable.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.DataTables.IDataTable.HasRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.DataTables.IDataTable.ColumnNames">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.DataTables.DataTable`1.GetRows">
            <summary>
            獲取所有的Rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.DataTable`1.Qi#DataTables#IDataTable#SetData(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.DataTable`1.GetSummaries(System.String)">
            <summary>
            
            </summary>
            <param name="calculatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.DataTable`1.GetSummaries">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.DataTable`1.GetSummaries(System.Int32)">
            <summary>
            
            </summary>
            <param name="calculatorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.DataTable`1.Column``1(System.String,System.Func{`0,``0})">
            <summary>
            
            </summary>
            <typeparam name="TReturnValue"></typeparam>
            <param name="columnName"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.DataTable`1.SetData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            set the data in this DataTable
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.DataTables.DataTable`1.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.DataTables.DataTable`1.ColumnNames">
            <summary>
            获取所有的Columns
            </summary>
        </member>
        <member name="P:Qi.DataTables.DataTable`1.HasRows">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.Domain.IDao`2">
            <summary>
            </summary>
            <typeparam name="TId">
            Id of the TReturn;
            </typeparam>
            <typeparam name="TReturn">Domain object's typel</typeparam>
        </member>
        <member name="M:Qi.Domain.IDao`2.GetAll">
            <summary>
            Get All object 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.Domain.IDao`2.Get(`0)">
            <summary>
            Return the persistent instance of the given entity class with the given identifier, or null if there is no such persistent instance. (If the instance, or a proxy for the instance, is already associated with the session, return that instance or proxy.)
            </summary>
            <param name="id">
            </param>
            <returns>
            a persistent instance or null
            </returns>
        </member>
        <member name="M:Qi.Domain.IDao`2.Load(`0)">
            <summary>
            Return the persistent instance of the given entity class with the given identifier, assuming that the instance exists.
            </summary>
            <param name="id">
            </param>
            <returns>
            The persistent instance or proxy
            </returns>
            <remarks>
            You should not use this method to determine if an instance exists (use a query or NHibernate.ISession.Get(System.Type,System.Object) instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error.
            </remarks>
        </member>
        <member name="M:Qi.Domain.IDao`2.Delete(`1)">
            <summary>
            Delete the record of an entity from Database and thus the entity becomes transient
            </summary>
            <param name="t">
            </param>
        </member>
        <member name="M:Qi.Domain.IDao`2.Refresh(`1)">
            <summary>
            Re-read the state of the entity from the database
            </summary>
            <param name="t">
            </param>
        </member>
        <member name="M:Qi.Domain.IDao`2.SaveOrUpdate(`1)">
            <summary>
            Persist the entity <paramref name="t"/> to DB if it has not been persisted before 
            </summary>
            <param name="t">
            </param>
            <remarks>
            By default the instance is always saved. 
            This behaviour may be adjusted by specifying an unsaved-value attribute of the identifier property mapping 
            </remarks>
        </member>
        <member name="M:Qi.Domain.IDao`2.Save(`1)">
            <summary>
            Persist the given transient instance, first assigning a generated identifier.  
            </summary>
            <param name="t">
            the given transient instance
            </param>
            <returns>
            The generated identifier
            </returns>
            <remarks>
            Save will use the current value of the identifier property if the Assigned generator is used.
            </remarks>
        </member>
        <member name="M:Qi.Domain.IDao`2.Update(`1)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Qi.Domain.IDao`2.FindByExample(`1,System.String[])">
            <summary>
            </summary>
            <param name="exampleInstance">
            The example instance.
            </param>
            <param name="propertiesToExclude">
            The properties to exclude.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Qi.Domain.IDao`2.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.DataTables.ICalculator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.DataTables.ICalculator.SetValue(System.Object)">
            <summary>
            set value to this object for calculate;
            </summary>
            <param name="rowValue"></param>
        </member>
        <member name="M:Qi.DataTables.ICalculator.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.DataTables.ICalculator.Name">
            <summary>
            Gets or sets the name of calculator
            </summary>
        </member>
        <member name="P:Qi.DataTables.ICalculator.Result">
            <summary>
            Get the result which calculated.
            </summary>
        </member>
        <member name="T:Qi.Text.NamedFormatterHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.Text.NamedFormatterHelper.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            use replacePatten to replace Variables those in <seealso cref="!:formatString"/>, 
            Variable need to defined in  square brackets, such as like that "[var]"
            </summary>
            <param name="formatString"></param>
            <param name="replacePattern">a dictionary with key and value,the key without "["</param>
            <returns></returns>
        </member>
        <member name="M:Qi.Text.NamedFormatterHelper.CollectVariable(System.String)">
            <summary>
            Collect variable express in <seealso cref="!:content"/>, such as "I am a [varName]"
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.EnumDescriptionAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.EnumDescriptionAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name">show name of the Enum value, if set the <seealso cref="P:Qi.EnumDescriptionAttribute.ResourceType"/>, it means the Key of resource. </param>
        </member>
        <member name="P:Qi.EnumDescriptionAttribute.ResourceType">
            <summary>
            Gets or sets the type of resource。
            </summary>
        </member>
        <member name="P:Qi.EnumDescriptionAttribute.Name">
            <summary>
            Gets or sets the Name of this descirption.
            </summary>
        </member>
        <member name="T:Qi.SharePools.SharePool">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.SharePools.SharePool.ThreadStaticStore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.SharePools.SharePool.HttpStore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.SharePools.SharePool.CallContextStore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.SharePools.SharePool.DefaultStore">
            <summary>
            Get the Default Store, if in web context, return HttpStore, or CallContext
            </summary>
        </member>
        <member name="T:Qi.SharePools.SharePool.CallStoreBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.SharePools.SharePool.HttpStoreBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.SharePools.SharePool.ThreadStatcBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.Time">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.Time.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="hour"></param>
            <param name="mins"></param>
            <param name="second"></param>
        </member>
        <member name="M:Qi.Time.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="hour"></param>
            <param name="mins"></param>
            <param name="second"></param>
            <param name="millsecond"></param>
        </member>
        <member name="M:Qi.Time.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="ticks"></param>
        </member>
        <member name="M:Qi.Time.AddHours(System.Int32)">
            <summary>
            Return a new time instance after add special number of hours to this instance
            </summary>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.AddMinutes(System.Int32)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.AddSeconds(System.Int32)">
            <summary>
            
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.AddMillseconds(System.Int32)">
            <summary>
            
            </summary>
            <param name="millsecond"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.ToString(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_Subtraction(Qi.Time,Qi.Time)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_Subtraction(System.DateTime,Qi.Time)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_Addition(Qi.Time,Qi.Time)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_Addition(System.DateTime,Qi.Time)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_Addition(Qi.Time,System.DateTime)">
            <summary>
            
            </summary>
            <param name="t1"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_Equality(Qi.Time,Qi.Time)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_Inequality(Qi.Time,Qi.Time)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_GreaterThanOrEqual(Qi.Time,Qi.Time)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_LessThanOrEqual(Qi.Time,Qi.Time)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_GreaterThan(Qi.Time,Qi.Time)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.op_LessThan(Qi.Time,Qi.Time)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.Time.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.Time.Ticks">
             <summary>
            Gets the number of ticks that represents the value of the current <see cref="T:System.TimeSpan"/>
             </summary>
        </member>
        <member name="P:Qi.Time.Hours">
             <summary>
            Gets the hours component of time interval represented by the current <see cref="T:System.TimeSpan"/>
             </summary>
        </member>
        <member name="P:Qi.Time.Minutes">
            <summary>
            Gets the minutes component of time interval represented by the current <see cref="T:System.TimeSpan"/>
            </summary>
        </member>
        <member name="P:Qi.Time.Seconds">
             <summary>
            Gets the Secnonds component of time interval represented by the current <see cref="T:System.TimeSpan"/>
             </summary>
        </member>
        <member name="P:Qi.Time.Millseconds">
             <summary>
            Gets the milliseconds component of time interval represented by the current <see cref="T:System.TimeSpan"/>
             </summary>
        </member>
        <member name="T:Qi.IO.IoExtender">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.IO.IoExtender.CreateDirectories(System.String)">
            <summary>
            创建一个完成Path的目录,如 c:\NoExist1\NoExist2\NoExist3,那么他会自动创建
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Qi.IO.IoExtender.CreateEx(System.IO.DirectoryInfo)">
            <summary>
            Create diectory and its sub-directory.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:Qi.IO.IoExtender.GetFilesEx(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
            
            </summary>
            <param name="parentDirectory"></param>
            <param name="searchPattern">support *.exe, or *.bat|*.exe|*.dll </param>
            <param name="searchOption"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.IO.IoExtender.GetFilesEx(System.IO.DirectoryInfo,System.String)">
            <summary>
            
            </summary>
            <param name="parentDirectory"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.DataTables.Columns.AbstractColumn`1">
            <summary>
            
            </summary>
            <typeparam name="T">T for colum's Value type.</typeparam>
        </member>
        <member name="T:Qi.DataTables.IColumn">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.DataTables.IColumn.GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.IColumn.HasCaculator(System.String)">
            <summary>
            
            </summary>
            <param name="calculatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.IColumn.GetResult(System.String)">
            <summary>
            
            </summary>
            <param name="calculatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.IColumn.GetResult(System.Int32)">
            <summary>
            
            </summary>
            <param name="calculatorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.IColumn.Add(Qi.DataTables.ICalculator)">
            <summary>
            
            </summary>
            <param name="calculator"></param>
        </member>
        <member name="M:Qi.DataTables.IColumn.Clear">
            <summary>
            Clear the result of the summary and the value
            </summary>
        </member>
        <member name="M:Qi.DataTables.IColumn.Reset">
            <summary>
            Reset result of the calulators
            </summary>
        </member>
        <member name="P:Qi.DataTables.IColumn.Name">
            <summary>
            Gets or sets the name of this column
            </summary>
        </member>
        <member name="P:Qi.DataTables.IColumn.Count">
            <summary>
            Gets or sets the Calulator's count
            </summary>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.Qi#DataTables#IColumn#GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.HasCaculator(System.String)">
            <summary>
            
            </summary>
            <param name="calculatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.GetResult(System.String)">
            <summary>
            
            </summary>
            <param name="calculatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.GetResult(System.Int32)">
            <summary>
            
            </summary>
            <param name="calculatorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.Reset">
            <summary>
            Reset all the result include calculator
            </summary>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.Clear">
            <summary>
            clear the reference of type,because it may be object.
            </summary>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.Add(Qi.DataTables.ICalculator)">
            <summary>
            Add new calulator for this Column
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.Columns.AbstractColumn`1.InvokeObject(System.Object)">
            <summary>
            
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.DataTables.Columns.AbstractColumn`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.DataTables.Columns.AbstractColumn`1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.SharePools.Stores.HttpStore">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.SharePools.IStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.SharePools.IStore.SetData(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Qi.SharePools.IStore.GetData(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.SharePools.Stores.HttpStore.SetData(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Qi.SharePools.Stores.HttpStore.GetData(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.SharePools.Stores.HttpStore.Dictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.Net.NetworkException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.Net.NetworkException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Qi.DataTables.Calculator">
            <summary>
            include all calculator
            </summary>
        </member>
        <member name="M:Qi.DataTables.Calculator.Sum``1(Qi.DataTables.IColumn)">
            <summary>
            sum all row in this column
            </summary>
            <typeparam name="T"></typeparam>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.Calculator.Avg``1(Qi.DataTables.IColumn)">
            <summary>
            avg all rows belong this column
            </summary>
            <typeparam name="T"></typeparam>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.Calculator.CreateSumCalculator(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.Calculator.SumResult(Qi.DataTables.IColumn)">
            <summary>
            Get sum result from column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.Calculator.AvgResult(Qi.DataTables.IColumn)">
            <summary>
            Get avg result from column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.IO.Serialization.SerializationHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.IO.Serialization.SerializationHelper.SerializeBinary(System.Object,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="outputSteam"></param>
        </member>
        <member name="M:Qi.IO.Serialization.SerializationHelper.SerializeBinary(System.Object,System.String)">
            <summary>
            SerializeBinary to binary.
            </summary>
            <param name="obj"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Qi.IO.Serialization.SerializationHelper.DeserializeBinary``1(System.IO.Stream)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectStream"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.IO.Serialization.SerializationHelper.DeserializeBinary``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.IO.Serialization.SerializationHelper.SerializerXml(System.Object,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="outputSteam"></param>
        </member>
        <member name="M:Qi.IO.Serialization.SerializationHelper.SerializerXml(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="file"></param>
        </member>
        <member name="M:Qi.IO.Serialization.SerializationHelper.DeserializerXml(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.IO.Serialization.SerializationHelper.DeserializerXml(System.IO.Stream,System.Type)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.IO.Serialization.SerializationHelper.DeserializerXml``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.Domain.DomainObject`2">
            <summary>
            For a discussion of this object, see 
            http://devlicio.us/blogs/billy_mccafferty/archive/2007/04/25/using-equals-gethashcode-effectively.aspx
            Code from http://ayende.com/blog/2500/generic-entity-equality.
            </summary>
        </member>
        <member name="T:Qi.Domain.IDomainObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.Domain.IDomainObject.Id">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.Domain.DomainObject`2.op_Equality(Qi.Domain.DomainObject{`0,`1},Qi.Domain.DomainObject{`0,`1})">
            <summary>
            Equality operator so we can have == semantics
            </summary>
        </member>
        <member name="M:Qi.Domain.DomainObject`2.op_Inequality(Qi.Domain.DomainObject{`0,`1},Qi.Domain.DomainObject{`0,`1})">
            <summary>
            Inequality operator so we can have != semantics
            </summary>
        </member>
        <member name="M:Qi.Domain.DomainObject`2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Domain.DomainObject`2.IsTransient">
            <summary>
            Transient objects are not associated with an item already in storage.  
            </summary>
        </member>
        <member name="M:Qi.Domain.DomainObject`2.GetHashCode">
            <summary>
            Must be provided to properly compare two objects
            </summary>
        </member>
        <member name="P:Qi.Domain.DomainObject`2.Id">
            <summary>
            Id may be of type string, int, custom type, etc.
            Setter is protected to allow unit tests to set this property via reflection and to allow 
            domain objects more flexibility in setting this for those objects with assigned IDs.
            </summary>
        </member>
        <member name="T:Qi.DataTables.CreatingResultException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.DataTables.CreatingResultException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Qi.NotFoundCacheObjectException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.NotFoundCacheObjectException.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Qi.SharePools.Stores.CallStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.SharePools.Stores.CallStore.SetData(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Qi.SharePools.Stores.CallStore.GetData(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.QCache">
            <summary>
            Sameple cache
            </summary>
        </member>
        <member name="M:Qi.QCache.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="slideTime"></param>
        </member>
        <member name="M:Qi.QCache.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.QCache.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.QCache.Add(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="milliSeconds"></param>
            <returns>key of obj </returns>
            <remarks></remarks>
        </member>
        <member name="M:Qi.QCache.GetObj(System.Int32)">
            <summary>
            
            </summary>
            <param name="hascode"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.Secret.EncryptHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Md5Utf8(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Md5Utf7(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Md5ASCII(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Md5Unicode(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha1Utf8(System.String)">
             <summary>
            用sha1 utf8进行加密
             </summary>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha1ASCII(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha1Unicode(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha1Utf7(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha256Utf8(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha256ASCII(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha256Unicode(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha256Utf7(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha384Utf8(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha384ASCII(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha384Unicode(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha384Utf7(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha512Utf8(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha512ASCII(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha512Unicode(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Sha512Utf7(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.EncryptHelper.Encrypt(System.String,System.Text.Encoding,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            
            </summary>
            <param name="content">加密的方法</param>
            <param name="getBytesFunc">把content转换为byte的方法</param>
            <param name="hashAlgorithm">加密的方式</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Content is null</exception>
             <exception cref="T:System.ArgumentNullException">getBytesFunc is null</exception>
             <exception cref="T:System.ArgumentNullException">hashAlgorithm is null</exception>
        </member>
        <member name="T:Qi.QMath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.QMath.Ceilling(System.Decimal,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="midPointRouting"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.QMath.Truncate(System.Decimal,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="midPointRouting"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.DataTables.ColumnCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.DataTables.ColumnCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.ColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.ColumnCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.DataTables.ColumnCollection.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.ColumnCollection.Add(Qi.DataTables.IColumn)">
            <summary>
            
            </summary>
            <param name="column"></param>
        </member>
        <member name="P:Qi.DataTables.ColumnCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.DataTables.ColumnCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.DataTables.ColumnCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.Secret.DesHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.Secret.DesHelper.EncryptByDes(System.String,System.Text.Encoding,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="getByteFunc"></param>
            <param name="rgbKey"></param>
            <param name="rgbIv"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.DesHelper.DecryptByDes(System.Byte[],System.Text.Encoding,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="inData"></param>
            <param name="getByteFunc"></param>
            <param name="rgbKey"></param>
            <param name="rgbIv"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.DesHelper.EncryptFileByDes(System.IO.FileInfo,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceFile"></param>
            <param name="destFile"></param>
            <param name="rgbKey"></param>
            <param name="rgbIv"></param>
        </member>
        <member name="M:Qi.Secret.DesHelper.EncryptFileByDes(System.IO.FileInfo,System.String,System.Text.Encoding,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceFile"></param>
            <param name="destFile"></param>
            <param name="getByteFunc"></param>
            <param name="rgbKey"></param>
            <param name="rgbIv"></param>
        </member>
        <member name="M:Qi.Secret.DesHelper.DecryptFileByDes(System.IO.FileInfo,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceFile"></param>
            <param name="destFile"></param>
            <param name="rgbKey"></param>
            <param name="rgbIv"></param>
        </member>
        <member name="M:Qi.Secret.DesHelper.DecryptFileByDes(System.IO.FileInfo,System.String,System.Text.Encoding,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceFile"></param>
            <param name="destFile"></param>
            <param name="getByteFunc"></param>
            <param name="rgbKey"></param>
            <param name="rgbIv"></param>
        </member>
        <member name="T:Qi.SharePools.Stores.ThreadStaticStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.SharePools.Stores.ThreadStaticStore.SetData(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Qi.SharePools.Stores.ThreadStaticStore.GetData(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.EnumHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.EnumHelper.GetObjects``1">
            <summary>
            Gets the objects from enum type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.ToDescription(System.Enum)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.ToDescriptionAry(System.Enum)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.ToDescriptionAry(System.Enum,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.ToDescription(System.Enum,System.Globalization.CultureInfo)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="cultureInfo"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Qi.EnumHelper.GetStringFromAttr(System.Reflection.FieldInfo,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="fieldinfo"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.IsMatch(System.Enum,System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            
            </summary>
            <param name="multiEnumValue"></param>
            <param name="infos"></param>
            <param name="hasFlags"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.DescriptionToEnum``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="descriptionString"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.ToEnum``1(System.String)">
            <summary>
            字符串转枚举
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumExpress"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.GetDescriptionList``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.GetDescriptionList(System.Type)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.GetDescriptionList(System.Type,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.EnumHelper.GetDescriptionList``1(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.DataTables.Columns.ReferenceColumn`2">
            <summary>
            Reference Column
            </summary>
            <typeparam name="T">object of this column for show.</typeparam>
            <typeparam name="TReturnValue">Column 's value type</typeparam>
        </member>
        <member name="M:Qi.DataTables.Columns.ReferenceColumn`2.#ctor(System.String,Qi.DataTables.IColumn,System.Func{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="reference"></param>
            <param name="showCondition"></param>
        </member>
        <member name="M:Qi.DataTables.Columns.ReferenceColumn`2.InvokeObject(System.Object)">
            <summary>
            
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.Collections.CollectionAccessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.Collections.CollectionAccessor.#ctor(System.Object)">
            <summary>
            create collectionAccessor, please use <seealso cref="M:Qi.Collections.CollectionAccessor.Create(System.Object)"/>
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Qi.Collections.CollectionAccessor.SetOrAdd(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:Qi.Collections.CollectionAccessor.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
            
        </member>
        <member name="M:Qi.Collections.CollectionAccessor.Set(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:Qi.Collections.CollectionAccessor.Create(System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.Collections.CollectionAccessor.Target">
            <summary>
            Gets the collection instance.
            </summary>
        </member>
        <member name="P:Qi.Collections.CollectionAccessor.AddMethod">
            <summary>
             Gets or sets handler for adding item .
            </summary>
        </member>
        <member name="P:Qi.Collections.CollectionAccessor.SetMethod">
            <summary>
            Gets or sets handler for setting item
            </summary>
        </member>
        <member name="P:Qi.Collections.CollectionAccessor.CountMethod">
            <summary>
            Gets or sets handler for couting the collection's number
            </summary>
        </member>
        <member name="T:Qi.Web.ReflectiveHttpContext">
            <summary>
            This class allows access to the HttpContext without referring to HttpContext at compile time.
            The accessors are cached as delegates for performance.
            </summary>
            <remarks>
            Code from NHibernate
            </remarks>
        </member>
        <member name="P:Qi.Web.ReflectiveHttpContext.HttpContextCurrentGetter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.Web.ReflectiveHttpContext.HttpContextItemsGetter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.Web.ReflectiveHttpContext.HttpContextCurrentItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.Draw.ResizePic">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.Draw.ResizePic.Resize(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="originalImagePath"></param>
            <param name="thumNailPath"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.Draw.ResizePic.MaxWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qi.Draw.ResizePic.MaxHeight">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.Collections.CollectionActivtor">
            <summary>
            Create instance base on colection type.
            </summary>
        </member>
        <member name="M:Qi.Collections.CollectionActivtor.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="instanceType"></param>
        </member>
        <member name="M:Qi.Collections.CollectionActivtor.Create(System.Type,System.Int32)">
            <summary>
            
            </summary>
            <param name="childElementType"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Collections.CollectionActivtor.CreateAccessor(System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Collections.CollectionActivtor.IsSupport(System.Type,System.Type@)">
            <summary>
            
            </summary>
            <param name="modelType"></param>
            <param name="parameterType"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Collections.CollectionActivtor.Create(System.Type)">
            <summary>
            
            </summary>
            <param name="instanceType"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.Collections.CollectionActivtor.ActiveMethod">
            <summary>
            1 is the instance type, 2st is the child element type,
            3st int32 is the capacity,
            </summary>
        </member>
        <member name="T:Qi.Net.MacAddress">
            <summary>
            Mac address
            </summary>
        </member>
        <member name="M:Qi.Net.MacAddress.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="e"></param>
            <param name="f"></param>
        </member>
        <member name="M:Qi.Net.MacAddress.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Qi.Net.MacAddress.Parse(System.String)">
            <summary>
            mac could be 00:00:00:00:00 or 11.11.11.11.11 or 
            2222.2222.2222 or 010203040506
            </summary>
            <param name="mac"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Net.MacAddress.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.Net.MacAddress.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Net.MacAddress.Equals(Qi.Net.MacAddress)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Net.MacAddress.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qi.Net.MacAddress.op_Equality(Qi.Net.MacAddress,Qi.Net.MacAddress)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Net.MacAddress.op_Inequality(Qi.Net.MacAddress,Qi.Net.MacAddress)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.ObjectInitialization">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.ObjectInitialization.Once``1(System.Func{``0})">
            <summary>
            Init once and return the new one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="initMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.ObjectInitialization.Once``1(System.Func{``0},System.Int32@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="initMethod"></param>
            <param name="key">use key can found it in cache.</param>
            <returns></returns>
        </member>
        <member name="M:Qi.ObjectInitialization.WeakReference``1(System.Func{``0},System.Int32@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="initMethod"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.ObjectInitialization.WeakReference``1(System.Func{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="initMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.ObjectInitialization.GetObject``1(System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.DataTables.HorizontalCalulator">
            <summary>
            calulate multi column in a row.
            </summary>
        </member>
        <member name="M:Qi.DataTables.HorizontalCalulator.GetColumns(Qi.DataTables.IDataTable,System.String[])">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.HorizontalCalulator.Sum``1(Qi.DataTables.IDataTable,System.String,Qi.DataTables.IColumn[])">
            <summary>
            
            </summary>
            <typeparam name="TColumnValue"></typeparam>
            <param name="table"></param>
            <param name="columnName"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.HorizontalCalulator.Sum``1(Qi.DataTables.IDataTable,System.String,System.String[])">
            <summary>
            创建一个列，该列的结果由其他列相加而成。
            </summary>
            <typeparam name="TReturnValue"></typeparam>
            <param name="table"></param>
            <param name="columnName"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.DataTables.HorizontalCalulator.Column``1(Qi.DataTables.IDataTable,System.String,System.Func{System.Object[],``0},System.String[])">
            <summary>
            创建一个列，这个列的结果由其他列组合而成的。有方法计算结果
            </summary>
            <typeparam name="TReturnVaue">计算结果的类型</typeparam>
            <param name="table">数据</param>
            <param name="columnName">列的名称</param>
            <param name="customeFunc">计算结果列的方法</param>
            <param name="columnNames">这个列有哪些列计算而成</param>
            <returns></returns>
        </member>
        <member name="T:Qi.ArrayHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.ArrayHelper.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            a <see>
                <cref>System.String.Substring</cref>
              </see> method of array.
            </summary>
            <typeparam name="T">item of array</typeparam>
            <param name="array"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">start is less than 0</exception>
            /// <exception cref="T:System.ArgumentOutOfRangeException">end is less than start, or larger than array</exception>
        </member>
        <member name="M:Qi.ArrayHelper.SubArray``1(``0[],System.Int32)">
            <summary>
            a <see>
                <cref>System.String.Substring</cref>
              </see> method of array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.ArrayHelper.ToStringEx(System.Byte[],System.String)">
            <summary>
            Convert byte to string
            </summary>
            <param name="bytes"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.ArrayHelper.ToStringEx(System.Byte[])">
            <summary>
            use x2 format to conver byte;
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.ArrayHelper.Split``1(``0[],System.Int32)">
            <summary>
            把ary 按照每份拥有多个来分组数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ary"></param>
            <param name="maxLengthOfAry"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.ArrayHelper.Split``1(``0[],System.Int32,System.Int32@)">
            <summary>
            把Ary按照每分多少个Item进行切割
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ary"></param>
            <param name="maxLengthOfAry">每个数组的最大个数</param>
            <param name="remainder"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.ArrayHelper.DivEqual``1(``0[],System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ary"></param>
            <param name="dividEquallyNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.Secret.AesUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:Qi.Secret.AesUtil.Encrypt(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="toEncrypt"></param>
            <param name="shareKey"></param>
            <returns></returns>
        </member>
        <member name="M:Qi.Secret.AesUtil.Decrypt(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="toDecrypt"></param>
            <param name="shareKey"></param>
            <returns></returns>
        </member>
        <member name="T:Qi.DataTables.Columns.Column`2">
            <summary>
            Column
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturnValue"></typeparam>
        </member>
        <member name="M:Qi.DataTables.Columns.Column`2.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Qi.DataTables.Columns.Column`2.InvokeObject(System.Object)">
            <summary>
            
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="P:Qi.DataTables.Columns.Column`2.Accessor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Qi.ApplicationHelper">
            <summary>
            Application extend methods
            </summary>
        </member>
        <member name="M:Qi.ApplicationHelper.MapPath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">path is null </exception>
        </member>
        <member name="M:Qi.ApplicationHelper.MapPath(System.IO.DirectoryInfo,System.String)">
            <summary>
            
            </summary>
            <param name="rootDirectory">以这个路基为开始</param>
            <param name="mapPath"></param>
            <returns></returns>
            <remarks>
            <code>
            var rootDirect="a/b/c";
            var result=MapPath(new DirectoryInfo(rootDirect),"../b/b2"); //result is /a/b/b2
            </code>
            </remarks>
        </member>
        <member name="P:Qi.ApplicationHelper.PhysicalApplicationPath">
            <summary>
            Get the PhysicalApplication
            </summary>
        </member>
        <member name="P:Qi.ApplicationHelper.IsWeb">
            <summary>
            Gets a value indecate is web context or not
            </summary>
        </member>
    </members>
</doc>
